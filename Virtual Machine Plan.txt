Learning to Program by Writing a Virtual Machine:

Lesson 1: Setting up the project and moving a value into a register
	Create a C# project
	Create a CPU class
	Add a CPU.Tick() function
	Add a CPU to Program and call CPU.Tick() from Program.Main()
	Create Core class
	Create Core.Tick()
	Add Core[1] Cores to CPU
	Edit CPU.Tick()
		Core[0].Tick()
	Create an IIODevice interface
		int Read(source)
		Write(value, destination)
	Create a Bus class which implements IIODevice
		Needs internal routing code
	Add a Bus Northbridge to the CPU
	Add a Bus Southbdidge to the Northbridge
	Create a Bios class which implements IDevice
	Add a Bios object to the Southbridge
	Add an instruction pointer to the Core and initialise to the address of the Bios
	Create an Operation enum
		None = -1
		Move
	Create an Instruction struct
		Operation operation
		Int data 1
		Int data 2
	Add an array of instructions to the Bios class
	Add an array of registers to the CPU class
	Add an instruction to the Bios
		Move r0 Ox48 // "H"
	Create Operation Core.operation
	Create int[3] Core.InstructionData
	Add int[Operation.Count - 1] CPU.CyclesPerInstuction
	Create Core.GetInstruction()
		Set Core.Operation based on instruction pointer
		Read 2 ints from the instruction pointer into Core.Instruction
		set Core.Instrucion[3] = CPU.CyclesPerInstruction[Core.Operation];
	Create Core.DoInstruction()
	Edit Core.Tick()
		If(Core.Instruction[0] == Operation.None)
			Core.GetInstruction()
		Else
			if(Core.Instruction[3] > 0)
				Core.Instruction[3]--
			Else
				Core.DoInstruction
				Core.InstructionPointer += 12
	Edit Core.DoInstruction to do the instruction
	
Lesson 2: Adding a display and writing characters to it
	Create a Display class which derives from IDevice
		Maps the first byte of data to a command flag
			Only command is NewLine
		Maps the next n bytes to chars which are displayed via the console
	Add a display to CPU.Northbridge
	Add instructions to the bios
		Move 0xWhereverTheDisplayStarts r1 // Store the display memory location in a register
		Move r1 r2
	Add new operation
		Add
	Add instructions to the bios
		Add r2 1
		Move r0 r2
	Run
	Add instructions to the bios
		Repeat the instructions copying from bios to screen for: 0x65 0x6c 0x6c 0x6f
	Run
	
Lesson 3 Loops, conditionals, interrupts, and the Keyboard
	Add a jmp operator
	Modify bios program to overwrite display character in a loop
	Add a list of interrupt pointers to the Core
	Create a keyboard class which implements IIODevice
	Add a keyboard to the southbridge
	Create instruction: MoveToRegisterFromRegisterLocation
	Have the bios set up a an interrupt pointer for the keyboard
	Create an interupt handler that stuffs the key that has been presed into the register the bios program is reading into the display
	Modify the bios program to incrememnt the current character writing to the display
	Create a Compare operator
	Create a JumpEqual operator
	Modify the bios program
		Conditional jump out of main loop when reaching end of display line
			Send newline to display
			Move line position on display back to start of line
			Jump back to loop

Lesson 4 Memory and Storage

	